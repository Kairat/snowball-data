#!/usr/bin/perl -CS
use warnings;
use strict;
use autodie;
if (@ARGV != 3) {
    print <<"__END__";
Syntax: $0 VOC OUT1 OUT2

Compare the outputs OUT1 and OUT2 from stemming input VOC with a stemmer and
with a modified version of that stemmer.

Example usage for evaluating a change made in a sibling snowball checkout:

../snowball/stemwords -l english < english/voc.txt > tmp.english.output.txt
$0 english/voc.txt english/output.txt tmp.english.output.txt
__END__
    exit(1);
}

sub encode_entities {
    my $s = shift;
    $s =~ s/&/&amp;/g;
    $s =~ s/</&lt;/g;
    $s =~ s/>/&gt;/g;
    return $s;
}

my ($voc, $out1, $out2) = @ARGV;
my (%v, %o1, %o2);
my $changed_stem = 0;
my ($VOC, $OUT1, $OUT2);
open $VOC, '<:encoding(UTF-8)', $voc;
open $OUT1, '<:encoding(UTF-8)', $out1;
open $OUT2, '<:encoding(UTF-8)', $out2;
while (<$VOC>) {
    chomp(my $v = $_);
    chomp(my $out1 = <$OUT1>);
    chomp(my $out2 = <$OUT2>);
    warn "Duplicate for word $v\n" if exists $v{$v};
    $v{$v} = [$out1, $out2];
    ++$changed_stem if $out1 ne $out2;
    push @{$o1{$out1}}, $v;
    push @{$o2{$out2}}, $v;
}

# Now:
#
# $v{WORD} -> [OLDSTEM, NEWSTEM]
# $o1{STEM} -> [WORD for which oldstem(WORD) == STEM]
# $o2{STEM} -> [WORD for which newstem(WORD) == STEM]

my %reported;
my (@boring, @merges, @splits, %changes);
for my $v (sort keys %v) {
    my ($s1, $s2) = @{$v{$v}};
    if (scalar(@{$o1{$s1}}) == scalar(@{$o2{$s2}}) &&
        join("\0", @{$o1{$s1}}) eq join("\0", @{$o2{$s2}})) {
        # The same set of words map together before and after.
        # If the stem they map to is the same that's of no interest.
        # If the stem they map to have changed, that's a boring change.
        push @boring, $v if $s1 ne $s2;
        next;
    }

    # Check for a merge.  This is the case if:
    #
    # For each word which now stems to $s2, all the words which
    # used to stem to its old stem now also stem to $s2.
    my %m = ();
    M: for my $w (@{$o2{$s2}}) {
        # $w is a word which now stems to s2, $os is its old stem.
        my $os = ${$v{$w}}[0];
        $m{$os}++;
        for my $x (@{$o1{$os}}) {
            # $x is a word which used to stem to $os.
            if (${$v{$x}}[1] ne $s2) {
                %m = ();
                last M;
            }
        }
    }
    if (scalar keys %m > 1) {
        my @k = sort keys %m;
        if ($v eq ${$o1{$k[0]}}[0]) {
            # We find the merge for every word in it, so only report once for
            # the first word of the first stem.
            push @merges, join(' + ', map {'{ ' . join(' ', @{$o1{$_}}) . ' }'} @k);
        }
        next;
    } elsif (scalar keys %m == 1) {
        die "Solitary stem: " . (keys %m)[0];
    }

    # Check for a split.  This is the case if:
    #
    # For each word which used to stem to $s1, all the words which
    # now stem to its new stem also used to stem to $s1.
    my %s = ();
    S: for my $w (@{$o1{$s1}}) {
        # $w is a word which used to stem to s1, $ns is its new stem.
        my $ns = ${$v{$w}}[1];
        $s{$ns}++;
        for my $x (@{$o2{$ns}}) {
            # $x is a word which now stems to $ns.
            if (${$v{$x}}[0] ne $s1) {
                %s = ();
                last S;
            }
        }
    }
    if (scalar keys %s > 1) {
        my @k = sort keys %s;
        if ($v eq ${$o2{$k[0]}}[0]) {
            # We find the split for every word in it, so only report once for
            # the first word of the first stem.
            push @splits, "{ " . join(' | ', map {join(' ', @{$o2{$_}})} @k) . " }";
        }
        next;
    } elsif (scalar keys %s == 1) {
        die "Solitary stem: " . (keys %s)[0];
    }

    push @{$changes{"$s1\0$s2"}}, $v;# if $s1 ne $s2;
}

open HTML, '>:encoding(UTF-8)', 'compare.html' or die $!;

print HTML "<html><head><meta charset='utf-8'><title>";
print HTML encode_entities("stemmer-compare $voc $out1 $out2");
print HTML "</title></head>\n<body>\n";

print HTML "<ul>\n";
printf HTML "<li>A total of %d words changed stem\n", $changed_stem;

if (scalar @boring) {
    printf HTML "<li>%d words changed stem but aren't interesting\n", scalar(@boring);
    #print "  ", join(' ', @boring), "\n" if $verbose;
}

if (@merges) {
    printf HTML "<li>%d merges of groups of stems:\n", scalar(@merges);
    print HTML "<div>\n";
    for (@merges) {
        print HTML encode_entities($_), "<br>\n";
    }
    print HTML "</div>\n";
}

if (@splits) {
    printf HTML "<li>%d splits of groups of stems:\n", scalar(@splits);
    print HTML "<div>\n";
    for (@splits) {
        print HTML encode_entities($_), "<br>\n";
    }
    print HTML "</div>\n";
}

if (keys %changes) {
    printf HTML "<li>%d words moving between stem groups:\n", scalar(keys %changes);
    my $png_file = 'compare.png';
    open DOT, "|-:encoding(UTF-8)", "dot -Tpng -o \Q$png_file\E" or die $!;
    print DOT "digraph {\nrankdir=LR\nnode [shape=box]\n";
    for (reverse sort keys %changes) {
        my ($s1, $s2) = split /\0/;
        my $old_ref = $o1{$s1};
        my $new_ref = $o2{$s2};
        $s1 =~ y/'/_/;
        $s2 =~ y/'/_/;
        print DOT "o_$s1 [label=\"";
        for (@$old_ref) {
            print DOT "\Q$_\E\\l";
        }
        print DOT "\"]\n";
        print DOT "n_$s2 [label=\"";
        for (@$new_ref) {
            print DOT "\Q$_\E\\l";
        }
        print DOT "\"]\n";
        print DOT "o_$s1 -> n_$s2\n"
    }
    print DOT "}\n";
    close DOT or die $!;
    print HTML "<br><img src=\"", encode_entities($png_file), "\">\n";
}

print HTML "</body></html>\n";
